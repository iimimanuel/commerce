// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  username     String    @unique
  passwordHash String
  email        String?   @unique
  name         String?
  role         Role      @default(USER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  googleId     String?   @unique
  sessions     Session[]

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String
  isActive    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categories  Category[] @relation("ProductCategories")
  Variant     Variant[]

  @@map("products")
}

model Variant {
  id        String   @id @default(cuid())
  name      String
  price     Float
  stock     Int
  images    String[]
  productId String
  Product   Product  @relation(fields: [productId], references: [id])

  @@map("variants")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[] @relation("ProductCategories")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  items     OrderItem[]
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  order     Order  @relation(fields: [orderId], references: [id])
  orderId   String
  productId String
  quantity  Int
  price     Float

  @@map("OrderItems")
}


model Content {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Contents")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
  EDITOR
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}
